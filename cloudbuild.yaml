steps:
# Step-1: Grant permissions to Cloud Build service account
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'Step-1: Grant permissions to Cloud Build service account'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    # Get Cloud Build service account
    export CLOUDBUILD_SA=$(gcloud projects describe $PROJECT_ID --format="value(projectNumber)")@cloudbuild.gserviceaccount.com
    
    # Grant necessary roles
    gcloud projects add-iam-policy-binding $PROJECT_ID \
      --member="serviceAccount:$$CLOUDBUILD_SA" \
      --role="roles/container.developer"
    
    gcloud projects add-iam-policy-binding $PROJECT_ID \
      --member="serviceAccount:$$CLOUDBUILD_SA" \
      --role="roles/container.clusterAdmin"
    
    gcloud projects add-iam-policy-binding $PROJECT_ID \
      --member="serviceAccount:$$CLOUDBUILD_SA" \
      --role="roles/iam.serviceAccountAdmin"
    
    gcloud projects add-iam-policy-binding $PROJECT_ID \
      --member="serviceAccount:$$CLOUDBUILD_SA" \
      --role="roles/iam.serviceAccountKeyAdmin"
    
    gcloud projects add-iam-policy-binding $PROJECT_ID \
      --member="serviceAccount:$$CLOUDBUILD_SA" \
      --role="roles/compute.networkAdmin"

# Step-2: Create service account
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'Step-2: Create service account'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    # Check if service account exists
    if ! gcloud iam service-accounts describe doc-ocr-vertex-ai-sa@$PROJECT_ID.iam.gserviceaccount.com >/dev/null 2>&1; then
      echo "Creating new service account..."
      gcloud iam service-accounts create doc-ocr-vertex-ai-sa \
        --display-name="Doc OCR Vertex AI Service Account" \
        --description="Service account for doc-ocr to access Vertex AI"
      
      # Grant Vertex AI permissions
      gcloud projects add-iam-policy-binding $PROJECT_ID \
        --member="serviceAccount:doc-ocr-vertex-ai-sa@$PROJECT_ID.iam.gserviceaccount.com" \
        --role="roles/aiplatform.user"
      
      gcloud projects add-iam-policy-binding $PROJECT_ID \
        --member="serviceAccount:doc-ocr-vertex-ai-sa@$PROJECT_ID.iam.gserviceaccount.com" \
        --role="roles/ml.developer"
    else
      echo "Service account already exists"
    fi

# Step-3: Create static IP
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'Step-3: Create static IP'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    # Check if static IP exists
    if ! gcloud compute addresses describe doc-ocr-ip --global >/dev/null 2>&1; then
      echo "Creating static IP..."
      gcloud compute addresses create doc-ocr-ip --global
    else
      echo "Static IP already exists"
    fi

# Step-4: Generate service account key
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'Step-4: Generate service account key'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    # Delete existing keys (cleanup old keys)
    gcloud iam service-accounts keys list \
      --iam-account=doc-ocr-vertex-ai-sa@$PROJECT_ID.iam.gserviceaccount.com \
      --format="value(name)" | while read key; do
      echo "Deleting old key: $$key"
      gcloud iam service-accounts keys delete $$key \
        --iam-account=doc-ocr-vertex-ai-sa@$PROJECT_ID.iam.gserviceaccount.com \
        --quiet || true
    done
    
    # Generate new key
    gcloud iam service-accounts keys create /workspace/sa-key.json \
      --iam-account=doc-ocr-vertex-ai-sa@$PROJECT_ID.iam.gserviceaccount.com

# Step-5: Get GKE credentials
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'Step-5: Get GKE credentials'
  entrypoint: 'gcloud'
  args:
  - 'container'
  - 'clusters'
  - 'get-credentials'
  - '${_GKE_CLUSTER_NAME}'
  - '--region=${_GKE_REGION}'
  - '--project=$PROJECT_ID'

# Step-6: Create namespace
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'Step-6: Create namespace'
  entrypoint: 'kubectl'
  args: ['apply', '-f', 'k8s/Namespace.yaml']

# Step-7: Create secret with service account key
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'Step-7: Create secret with service account key'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    kubectl create secret generic vertex-ai-sa-key \
      --from-file=key.json=/workspace/sa-key.json \
      --namespace=doc-ocr \
      --dry-run=client -o yaml | kubectl apply -f -

# Step-8: Deploy infrastructure (MongoDB, ZooKeeper, Kafka)
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'Step-8: Deploy infrastructure'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    # Apply all infrastructure components
    kubectl apply -f k8s/mongodb-StatefulSet.yaml
    kubectl apply -f k8s/mongodb-Service.yaml
    kubectl apply -f k8s/zookeeper-StatefulSet.yaml
    kubectl apply -f k8s/zookeeper-Service.yaml
    kubectl apply -f k8s/kafka-StatefulSet.yaml
    kubectl apply -f k8s/kafka-service.yaml
    
    # Wait for infrastructure to be ready
    kubectl wait --for=condition=ready pod -l app=mongodb --timeout=300s -n doc-ocr
    kubectl wait --for=condition=ready pod -l app=zookeeper --timeout=300s -n doc-ocr
    kubectl wait --for=condition=ready pod -l app=kafka --timeout=600s -n doc-ocr

# Step-9: Build doc-ocr-backend image
- name: 'gcr.io/cloud-builders/docker'
  id: 'Step-9: Build doc-ocr-backend image'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/doc-ocr-backend:latest', './doc-ocr-backend']

# Step-10: Build doc-ocr-processing image
- name: 'gcr.io/cloud-builders/docker'
  id: 'Step-10: Build doc-ocr-processing image'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/doc-ocr-processing:latest', './doc-ocr-processing']

# Step-11: Build doc-ocr-frontend image
- name: 'gcr.io/cloud-builders/docker'
  id: 'Step-11: Build doc-ocr-frontend image'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/doc-ocr-frontend:latest', './doc-ocr-frontend']

# Step-12: Push doc-ocr-backend image
- name: 'gcr.io/cloud-builders/docker'
  id: 'Step-12: Push doc-ocr-backend image'
  args: ['push', 'gcr.io/$PROJECT_ID/doc-ocr-backend:latest']

# Step-13: Push doc-ocr-processing image
- name: 'gcr.io/cloud-builders/docker'
  id: 'Step-13: Push doc-ocr-processing image'
  args: ['push', 'gcr.io/$PROJECT_ID/doc-ocr-processing:latest']

# Step-14: Push doc-ocr-frontend image
- name: 'gcr.io/cloud-builders/docker'
  id: 'Step-14: Push doc-ocr-frontend image'
  args: ['push', 'gcr.io/$PROJECT_ID/doc-ocr-frontend:latest']

# Step-15: Deploy applications
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'Step-15: Deploy applications'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    # Substitute PROJECT_ID in deployment files
    sed "s/\$${PROJECT_ID}/$PROJECT_ID/g" k8s/doc-ocr-processing-Deployment.yaml | kubectl apply -f -
    sed "s/\$${PROJECT_ID}/$PROJECT_ID/g" k8s/doc-ocr-backend-Deployment.yaml | kubectl apply -f -
    kubectl apply -f k8s/doc-ocr-backend-Service.yaml
    sed "s/\$${PROJECT_ID}/$PROJECT_ID/g" k8s/doc-ocr-frontend-Deployment.yaml | kubectl apply -f -
    kubectl apply -f k8s/doc-ocr-frontend-Service.yaml

# Step-16: Deploy ingress and certificate
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'Step-16: Deploy ingress and certificate'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    kubectl apply -f k8s/ManagedCertificate.yaml
    kubectl apply -f k8s/Ingress.yaml

# Step-17: Wait for deployments and restart pods
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'Step-17: Wait for deployments and restart pods'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    # Wait for deployments to be ready
    kubectl wait --for=condition=available deployment/doc-ocr-processing --timeout=600s -n doc-ocr
    kubectl wait --for=condition=available deployment/doc-ocr-backend --timeout=600s -n doc-ocr
    kubectl wait --for=condition=available deployment/doc-ocr-frontend --timeout=600s -n doc-ocr
    
    # Restart pods to ensure they pick up latest images
    kubectl rollout restart deployment/doc-ocr-processing -n doc-ocr
    kubectl rollout restart deployment/doc-ocr-backend -n doc-ocr
    kubectl rollout restart deployment/doc-ocr-frontend -n doc-ocr

substitutions:
  _GKE_CLUSTER_NAME: 'next-demo-cluster'
  _GKE_REGION: 'us-central1'

timeout: 3600s